name: Build & Deploy BlazorApp

on:
  push:
    branches: ["main"]
  
env: 
  DOTNET_VERSION: 8.0.x
  NODE_VERSION: 22.x

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Descargar el código fuente
      - name: Descargar código
        uses: actions/checkout@v4

      # 2. Configurar el entorno de .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Usara un nombre de clave para el caché
      # 3. Paquetes de NuGet
      - uses: actions/cache@v4
        with: 
         path: ~/.nuget/packages
         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}


      # 4. Configurar el entorno de Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Restore and publish
      - name: Restore APP Blazor
        run: |
          dotnet restore
          # Inyectar la API key 
          echo "{\"OpenWeather\":{\"Key\":\"${{ secrets.OPENWEATHER_KEY }}\"}}" > SkyCast/appsettings.Production.json
          dotnet publish SkyCast/SkyCast.csproj -c Release --output ./publish -p:StaticWebAssetBase=dotmetweathermega

      # 5. Artifactos de compilación
      - uses : actions/upload-artifact@v4
        with:
          name: publish
          path: publish

      # 6. Desplegar a Azure App Service
      - name: Deploy to pages 
        uses: peaceiris/actions-gh-page@v4
        with: 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: SkyCast/publish/wwwroot
          force_orphan: true